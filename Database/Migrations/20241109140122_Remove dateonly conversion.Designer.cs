// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database;

#nullable disable

namespace WebApp.Database.Migrations
{
    [DbContext(typeof(WebAppDbContext))]
    [Migration("20241109140122_Remove dateonly conversion")]
    partial class Removedateonlyconversion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApp.Database.Tables.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebApp.Database.Tables.BackgroundJobLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("BackgroundJobName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset?>("Ended")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIMEOFFSET(0)")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("ErrorsJson")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("Started")
                        .HasColumnType("DATETIMEOFFSET(0)");

                    b.HasKey("LogId");

                    b.ToTable("BackgroundJobLog");
                });

            modelBuilder.Entity("WebApp.Database.Tables.Conference", b =>
                {
                    b.Property<int>("ConferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConferenceId"));

                    b.Property<string>("ConferenceName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ConferenceShortName")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("ConferenceId");

                    b.ToTable("Conference");

                    b.HasData(
                        new
                        {
                            ConferenceId = 1,
                            ConferenceName = "National Football Conference",
                            ConferenceShortName = "NFC"
                        },
                        new
                        {
                            ConferenceId = 2,
                            ConferenceName = "American Football Conference",
                            ConferenceShortName = "AFC"
                        });
                });

            modelBuilder.Entity("WebApp.Database.Tables.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DivisionId"));

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("DivisionId");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Division");

                    b.HasData(
                        new
                        {
                            DivisionId = 1,
                            ConferenceId = 1,
                            DivisionName = "NFC NORTH"
                        },
                        new
                        {
                            DivisionId = 2,
                            ConferenceId = 1,
                            DivisionName = "NFC EAST"
                        },
                        new
                        {
                            DivisionId = 3,
                            ConferenceId = 1,
                            DivisionName = "NFC SOUTH"
                        },
                        new
                        {
                            DivisionId = 4,
                            ConferenceId = 1,
                            DivisionName = "NFC WEST"
                        },
                        new
                        {
                            DivisionId = 5,
                            ConferenceId = 2,
                            DivisionName = "AFC NORTH"
                        },
                        new
                        {
                            DivisionId = 6,
                            ConferenceId = 2,
                            DivisionName = "AFC EAST"
                        },
                        new
                        {
                            DivisionId = 7,
                            ConferenceId = 2,
                            DivisionName = "AFC SOUTH"
                        },
                        new
                        {
                            DivisionId = 8,
                            ConferenceId = 2,
                            DivisionName = "AFC WEST"
                        });
                });

            modelBuilder.Entity("WebApp.Database.Tables.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"));

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<int>("AwayTeamScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ClockTime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Quarter")
                        .HasColumnType("int");

                    b.Property<int>("SeasonWeekId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("StartsOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIMEOFFSET(0)")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.HasKey("GameId");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("SeasonWeekId");

                    b.HasIndex("SeasonWeekId", "HomeTeamId", "AwayTeamId")
                        .IsUnique();

                    b.ToTable("Game");
                });

            modelBuilder.Entity("WebApp.Database.Tables.GamePrediction", b =>
                {
                    b.Property<int>("GamePredictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GamePredictionId"));

                    b.Property<int>("AwayTeamScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIMEOFFSET(0)")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GamePredictionId");

                    b.HasIndex("UserId");

                    b.HasIndex("GameId", "UserId")
                        .IsUnique();

                    b.ToTable("GamePrediction");
                });

            modelBuilder.Entity("WebApp.Database.Tables.InviteCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIMEOFFSET(0)")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset>("Expires")
                        .HasColumnType("DATETIMEOFFSET(0)");

                    b.HasKey("Id");

                    b.ToTable("InviteCode");
                });

            modelBuilder.Entity("WebApp.Database.Tables.Season", b =>
                {
                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("SeasonEnd")
                        .HasColumnType("date");

                    b.Property<DateOnly>("SeasonStart")
                        .HasColumnType("date");

                    b.HasKey("SeasonId");

                    b.ToTable("Season");

                    b.HasData(
                        new
                        {
                            SeasonId = 2022,
                            Description = "2022-2023 Football Season",
                            SeasonEnd = new DateOnly(1, 1, 1),
                            SeasonStart = new DateOnly(1, 1, 1)
                        });
                });

            modelBuilder.Entity("WebApp.Database.Tables.SeasonWeek", b =>
                {
                    b.Property<int>("SeasonWeekId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonWeekId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("SeasonWeekTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.Property<DateOnly>("WeekEnd")
                        .HasColumnType("date");

                    b.Property<DateOnly>("WeekStart")
                        .HasColumnType("date");

                    b.HasKey("SeasonWeekId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeasonWeekTypeName");

                    b.HasIndex("SeasonId", "Week", "SeasonWeekTypeName")
                        .IsUnique();

                    b.ToTable("SeasonWeek");
                });

            modelBuilder.Entity("WebApp.Database.Tables.SeasonWeekType", b =>
                {
                    b.Property<string>("SeasonWeekTypeName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SeasonWeekTypeName");

                    b.ToTable("SeasonWeekType");

                    b.HasData(
                        new
                        {
                            SeasonWeekTypeName = "Preseason"
                        },
                        new
                        {
                            SeasonWeekTypeName = "RegularSeason"
                        },
                        new
                        {
                            SeasonWeekTypeName = "PostSeason"
                        },
                        new
                        {
                            SeasonWeekTypeName = "OffSeason"
                        });
                });

            modelBuilder.Entity("WebApp.Database.Tables.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("BrandingLogo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("TeamFullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TeamId");

                    b.HasIndex("Abbreviation")
                        .IsUnique();

                    b.HasIndex("DivisionId");

                    b.HasIndex("TeamFullName")
                        .IsUnique();

                    b.HasIndex("TeamName")
                        .IsUnique();

                    b.ToTable("Team");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            Abbreviation = "ARI",
                            DivisionId = 4,
                            TeamFullName = "Arizona Cardinals",
                            TeamName = "Cardinals"
                        },
                        new
                        {
                            TeamId = 2,
                            Abbreviation = "ATL",
                            DivisionId = 3,
                            TeamFullName = "Atlanta Falcons",
                            TeamName = "Falcons"
                        },
                        new
                        {
                            TeamId = 3,
                            Abbreviation = "CAR",
                            DivisionId = 3,
                            TeamFullName = "Carolina Panthers",
                            TeamName = "Panthers"
                        },
                        new
                        {
                            TeamId = 4,
                            Abbreviation = "CHI",
                            DivisionId = 1,
                            TeamFullName = "Chicago Bears",
                            TeamName = "Bears"
                        },
                        new
                        {
                            TeamId = 5,
                            Abbreviation = "DAL",
                            DivisionId = 2,
                            TeamFullName = "Dallas Cowboys",
                            TeamName = "Cowboys"
                        },
                        new
                        {
                            TeamId = 6,
                            Abbreviation = "DET",
                            DivisionId = 1,
                            TeamFullName = "Detroit Lions",
                            TeamName = "Lions"
                        },
                        new
                        {
                            TeamId = 7,
                            Abbreviation = "GB",
                            DivisionId = 1,
                            TeamFullName = "Green Bay Packers",
                            TeamName = "Packers"
                        },
                        new
                        {
                            TeamId = 8,
                            Abbreviation = "LAR",
                            DivisionId = 4,
                            TeamFullName = "Los Angeles Rams",
                            TeamName = "Rams"
                        },
                        new
                        {
                            TeamId = 9,
                            Abbreviation = "MIN",
                            DivisionId = 1,
                            TeamFullName = "Minnesota Vikings",
                            TeamName = "Vikings"
                        },
                        new
                        {
                            TeamId = 10,
                            Abbreviation = "NO",
                            DivisionId = 3,
                            TeamFullName = "New Orleans Saints",
                            TeamName = "Saints"
                        },
                        new
                        {
                            TeamId = 11,
                            Abbreviation = "NYG",
                            DivisionId = 2,
                            TeamFullName = "New York Giants",
                            TeamName = "Giants"
                        },
                        new
                        {
                            TeamId = 12,
                            Abbreviation = "PHI",
                            DivisionId = 2,
                            TeamFullName = "Philadelphia Eagles",
                            TeamName = "Eagles"
                        },
                        new
                        {
                            TeamId = 13,
                            Abbreviation = "SF",
                            DivisionId = 4,
                            TeamFullName = "San Francisco 49ers",
                            TeamName = "49ers"
                        },
                        new
                        {
                            TeamId = 14,
                            Abbreviation = "SEA",
                            DivisionId = 4,
                            TeamFullName = "Seattle Seahawks",
                            TeamName = "Seahawks"
                        },
                        new
                        {
                            TeamId = 15,
                            Abbreviation = "TB",
                            DivisionId = 3,
                            TeamFullName = "Tampa Bay Buccaneers",
                            TeamName = "Buccaneers"
                        },
                        new
                        {
                            TeamId = 16,
                            Abbreviation = "WSH",
                            DivisionId = 2,
                            TeamFullName = "Washington Commanders",
                            TeamName = "Commanders"
                        },
                        new
                        {
                            TeamId = 17,
                            Abbreviation = "BAL",
                            DivisionId = 5,
                            TeamFullName = "Baltimore Ravens",
                            TeamName = "Ravens"
                        },
                        new
                        {
                            TeamId = 18,
                            Abbreviation = "BUF",
                            DivisionId = 6,
                            TeamFullName = "Buffalo Bills",
                            TeamName = "Bills"
                        },
                        new
                        {
                            TeamId = 19,
                            Abbreviation = "IND",
                            DivisionId = 7,
                            TeamFullName = "Indianapolis Colts",
                            TeamName = "Colts"
                        },
                        new
                        {
                            TeamId = 20,
                            Abbreviation = "CIN",
                            DivisionId = 5,
                            TeamFullName = "Cincinnati Bengals",
                            TeamName = "Bengals"
                        },
                        new
                        {
                            TeamId = 21,
                            Abbreviation = "CLE",
                            DivisionId = 5,
                            TeamFullName = "Cleveland Browns",
                            TeamName = "Browns"
                        },
                        new
                        {
                            TeamId = 22,
                            Abbreviation = "DEN",
                            DivisionId = 8,
                            TeamFullName = "Denver Broncos",
                            TeamName = "Broncos"
                        },
                        new
                        {
                            TeamId = 23,
                            Abbreviation = "HOU",
                            DivisionId = 7,
                            TeamFullName = "Houston Texans",
                            TeamName = "Texans"
                        },
                        new
                        {
                            TeamId = 24,
                            Abbreviation = "JAX",
                            DivisionId = 7,
                            TeamFullName = "Jacksonville Jaguars",
                            TeamName = "Jaguars"
                        },
                        new
                        {
                            TeamId = 25,
                            Abbreviation = "KC",
                            DivisionId = 8,
                            TeamFullName = "Kansas City Chiefs",
                            TeamName = "Chiefs"
                        },
                        new
                        {
                            TeamId = 26,
                            Abbreviation = "LV",
                            DivisionId = 8,
                            TeamFullName = "Las Vegas Raiders",
                            TeamName = "Raiders"
                        },
                        new
                        {
                            TeamId = 27,
                            Abbreviation = "LAC",
                            DivisionId = 8,
                            TeamFullName = "Los Angeles Chargers",
                            TeamName = "Chargers"
                        },
                        new
                        {
                            TeamId = 28,
                            Abbreviation = "MIA",
                            DivisionId = 6,
                            TeamFullName = "Miami Dolphins",
                            TeamName = "Dolphins"
                        },
                        new
                        {
                            TeamId = 29,
                            Abbreviation = "NE",
                            DivisionId = 6,
                            TeamFullName = "New England Patriots",
                            TeamName = "Patriots"
                        },
                        new
                        {
                            TeamId = 30,
                            Abbreviation = "NYJ",
                            DivisionId = 6,
                            TeamFullName = "New York Jets",
                            TeamName = "Jets"
                        },
                        new
                        {
                            TeamId = 31,
                            Abbreviation = "PIT",
                            DivisionId = 5,
                            TeamFullName = "Pittsburgh Steelers",
                            TeamName = "Steelers"
                        },
                        new
                        {
                            TeamId = 32,
                            Abbreviation = "TEN",
                            DivisionId = 7,
                            TeamFullName = "Tennessee Titans",
                            TeamName = "Titans"
                        });
                });

            modelBuilder.Entity("WebApp.Database.Tables.AppIdentityRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("AppIdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "USER",
                            Name = "USER",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "ADMIN",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApp.Database.Tables.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApp.Database.Tables.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Database.Tables.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApp.Database.Tables.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Database.Tables.Division", b =>
                {
                    b.HasOne("WebApp.Database.Tables.Conference", "Conference")
                        .WithMany("Divisions")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("WebApp.Database.Tables.Game", b =>
                {
                    b.HasOne("WebApp.Database.Tables.Team", "AwayTeam")
                        .WithMany("AwayGames")
                        .HasForeignKey("AwayTeamId")
                        .IsRequired();

                    b.HasOne("WebApp.Database.Tables.Team", "HomeTeam")
                        .WithMany("HomeGames")
                        .HasForeignKey("HomeTeamId")
                        .IsRequired();

                    b.HasOne("WebApp.Database.Tables.SeasonWeek", "SeasonWeek")
                        .WithMany("Games")
                        .HasForeignKey("SeasonWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("SeasonWeek");
                });

            modelBuilder.Entity("WebApp.Database.Tables.GamePrediction", b =>
                {
                    b.HasOne("WebApp.Database.Tables.Game", "Game")
                        .WithMany("GamePredictions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApp.Database.Tables.AppUser", "AppUser")
                        .WithMany("GamePredictions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("WebApp.Database.Tables.SeasonWeek", b =>
                {
                    b.HasOne("WebApp.Database.Tables.Season", "Season")
                        .WithMany("SeasonWeeks")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApp.Database.Tables.SeasonWeekType", "SeasonWeekType")
                        .WithMany("SeasonWeeks")
                        .HasForeignKey("SeasonWeekTypeName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("SeasonWeekType");
                });

            modelBuilder.Entity("WebApp.Database.Tables.Team", b =>
                {
                    b.HasOne("WebApp.Database.Tables.Division", "Division")
                        .WithMany("Teams")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("WebApp.Database.Tables.AppUser", b =>
                {
                    b.Navigation("GamePredictions");
                });

            modelBuilder.Entity("WebApp.Database.Tables.Conference", b =>
                {
                    b.Navigation("Divisions");
                });

            modelBuilder.Entity("WebApp.Database.Tables.Division", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("WebApp.Database.Tables.Game", b =>
                {
                    b.Navigation("GamePredictions");
                });

            modelBuilder.Entity("WebApp.Database.Tables.Season", b =>
                {
                    b.Navigation("SeasonWeeks");
                });

            modelBuilder.Entity("WebApp.Database.Tables.SeasonWeek", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("WebApp.Database.Tables.SeasonWeekType", b =>
                {
                    b.Navigation("SeasonWeeks");
                });

            modelBuilder.Entity("WebApp.Database.Tables.Team", b =>
                {
                    b.Navigation("AwayGames");

                    b.Navigation("HomeGames");
                });
#pragma warning restore 612, 618
        }
    }
}
