// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database;

#nullable disable

namespace WebApp.Database.Migrations
{
    [DbContext(typeof(WebAppDbContext))]
    [Migration("20230312215428_First Migration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApp.Database.Tables.Conference", b =>
                {
                    b.Property<int>("ConferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConferenceId"));

                    b.Property<string>("ConferenceName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ConferenceShortName")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("ConferenceId");

                    b.ToTable("Conference");

                    b.HasData(
                        new
                        {
                            ConferenceId = 1,
                            ConferenceName = "National Football Conference",
                            ConferenceShortName = "NFC"
                        },
                        new
                        {
                            ConferenceId = 2,
                            ConferenceName = "American Football Conference",
                            ConferenceShortName = "AFC"
                        });
                });

            modelBuilder.Entity("WebApp.Database.Tables.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DivisionId"));

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("DivisionId");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Division");

                    b.HasData(
                        new
                        {
                            DivisionId = 1,
                            ConferenceId = 1,
                            DivisionName = "NFC NORTH"
                        },
                        new
                        {
                            DivisionId = 2,
                            ConferenceId = 1,
                            DivisionName = "NFC EAST"
                        },
                        new
                        {
                            DivisionId = 3,
                            ConferenceId = 1,
                            DivisionName = "NFC SOUTH"
                        },
                        new
                        {
                            DivisionId = 4,
                            ConferenceId = 1,
                            DivisionName = "NFC WEST"
                        },
                        new
                        {
                            DivisionId = 5,
                            ConferenceId = 2,
                            DivisionName = "AFC NORTH"
                        },
                        new
                        {
                            DivisionId = 6,
                            ConferenceId = 2,
                            DivisionName = "AFC EAST"
                        },
                        new
                        {
                            DivisionId = 7,
                            ConferenceId = 2,
                            DivisionName = "AFC SOUTH"
                        },
                        new
                        {
                            DivisionId = 8,
                            ConferenceId = 2,
                            DivisionName = "AFC WEST"
                        });
                });

            modelBuilder.Entity("WebApp.Database.Tables.Game", b =>
                {
                    b.Property<int>("FootballGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FootballGameId"));

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<int>("AwayTeamScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ClockTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Quarter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonWeekId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("StartsOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIMEOFFSET(0)")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.HasKey("FootballGameId");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("SeasonWeekId");

                    b.HasIndex("SeasonWeekId", "HomeTeamId", "AwayTeamId")
                        .IsUnique();

                    b.ToTable("Game");
                });

            modelBuilder.Entity("WebApp.Database.Tables.Season", b =>
                {
                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("SeasonEnd")
                        .HasColumnType("date");

                    b.Property<DateTime>("SeasonStart")
                        .HasColumnType("date");

                    b.HasKey("SeasonId");

                    b.ToTable("Season");

                    b.HasData(
                        new
                        {
                            SeasonId = 2022,
                            Description = "2022-2023 Football Season",
                            SeasonEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SeasonStart = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("WebApp.Database.Tables.SeasonWeek", b =>
                {
                    b.Property<int>("SeasonWeekId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonWeekId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("SeasonWeekTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.Property<DateTime>("WeekEnd")
                        .HasColumnType("date");

                    b.Property<DateTime>("WeekStart")
                        .HasColumnType("date");

                    b.HasKey("SeasonWeekId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeasonWeekTypeName");

                    b.HasIndex("SeasonId", "Week", "SeasonWeekTypeName")
                        .IsUnique();

                    b.ToTable("SeasonWeek");
                });

            modelBuilder.Entity("WebApp.Database.Tables.SeasonWeekType", b =>
                {
                    b.Property<string>("SeasonWeekTypeName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SeasonWeekTypeName");

                    b.ToTable("SeasonWeekType");

                    b.HasData(
                        new
                        {
                            SeasonWeekTypeName = "Preseason"
                        },
                        new
                        {
                            SeasonWeekTypeName = "RegularSeason"
                        },
                        new
                        {
                            SeasonWeekTypeName = "PostSeason"
                        },
                        new
                        {
                            SeasonWeekTypeName = "OffSeason"
                        });
                });

            modelBuilder.Entity("WebApp.Database.Tables.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<string>("BrandingLogo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("TeamFullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TeamShortName")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("TeamId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("TeamFullName")
                        .IsUnique();

                    b.HasIndex("TeamName")
                        .IsUnique();

                    b.HasIndex("TeamShortName")
                        .IsUnique();

                    b.ToTable("Team");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            DivisionId = 4,
                            TeamFullName = "Arizona Cardinals",
                            TeamName = "Cardinals",
                            TeamShortName = "ARI"
                        },
                        new
                        {
                            TeamId = 2,
                            DivisionId = 3,
                            TeamFullName = "Atlanta Falcons",
                            TeamName = "Falcons",
                            TeamShortName = "ATL"
                        },
                        new
                        {
                            TeamId = 3,
                            DivisionId = 3,
                            TeamFullName = "Carolina Panthers",
                            TeamName = "Panthers",
                            TeamShortName = "CAR"
                        },
                        new
                        {
                            TeamId = 4,
                            DivisionId = 1,
                            TeamFullName = "Chicago Bears",
                            TeamName = "Bears",
                            TeamShortName = "CHI"
                        },
                        new
                        {
                            TeamId = 5,
                            DivisionId = 2,
                            TeamFullName = "Dallas Cowboys",
                            TeamName = "Cowboys",
                            TeamShortName = "DAL"
                        },
                        new
                        {
                            TeamId = 6,
                            DivisionId = 1,
                            TeamFullName = "Detroit Lions",
                            TeamName = "Lions",
                            TeamShortName = "DET"
                        },
                        new
                        {
                            TeamId = 7,
                            DivisionId = 1,
                            TeamFullName = "Green Bay Packers",
                            TeamName = "Packers",
                            TeamShortName = "GB"
                        },
                        new
                        {
                            TeamId = 8,
                            DivisionId = 4,
                            TeamFullName = "Los Angeles Rams",
                            TeamName = "Rams",
                            TeamShortName = "LA"
                        },
                        new
                        {
                            TeamId = 9,
                            DivisionId = 1,
                            TeamFullName = "Minnesota Vikings",
                            TeamName = "Vikings",
                            TeamShortName = "MIN"
                        },
                        new
                        {
                            TeamId = 10,
                            DivisionId = 3,
                            TeamFullName = "New Orleans Saints",
                            TeamName = "Saints",
                            TeamShortName = "NO"
                        },
                        new
                        {
                            TeamId = 11,
                            DivisionId = 2,
                            TeamFullName = "New York Giants",
                            TeamName = "Giants",
                            TeamShortName = "NYG"
                        },
                        new
                        {
                            TeamId = 12,
                            DivisionId = 2,
                            TeamFullName = "Philadelphia Eagles",
                            TeamName = "Eagles",
                            TeamShortName = "PHI"
                        },
                        new
                        {
                            TeamId = 13,
                            DivisionId = 4,
                            TeamFullName = "San Francisco 49ers",
                            TeamName = "49ers",
                            TeamShortName = "SF"
                        },
                        new
                        {
                            TeamId = 14,
                            DivisionId = 4,
                            TeamFullName = "Seattle Seahawks",
                            TeamName = "Seahawks",
                            TeamShortName = "SEA"
                        },
                        new
                        {
                            TeamId = 15,
                            DivisionId = 3,
                            TeamFullName = "Tampa Bay Buccaneers",
                            TeamName = "Buccaneers",
                            TeamShortName = "TB"
                        },
                        new
                        {
                            TeamId = 16,
                            DivisionId = 2,
                            TeamFullName = "Washington Commanders",
                            TeamName = "Commanders",
                            TeamShortName = "WAS"
                        },
                        new
                        {
                            TeamId = 17,
                            DivisionId = 5,
                            TeamFullName = "Baltimore Ravens",
                            TeamName = "Ravens",
                            TeamShortName = "BAL"
                        },
                        new
                        {
                            TeamId = 18,
                            DivisionId = 6,
                            TeamFullName = "Buffalo Bills",
                            TeamName = "Bills",
                            TeamShortName = "BUF"
                        },
                        new
                        {
                            TeamId = 19,
                            DivisionId = 7,
                            TeamFullName = "Indianapolis Colts",
                            TeamName = "Colts",
                            TeamShortName = "IND"
                        },
                        new
                        {
                            TeamId = 20,
                            DivisionId = 5,
                            TeamFullName = "Cincinnati Bengals",
                            TeamName = "Bengals",
                            TeamShortName = "CIN"
                        },
                        new
                        {
                            TeamId = 21,
                            DivisionId = 5,
                            TeamFullName = "Cleveland Browns",
                            TeamName = "Browns",
                            TeamShortName = "CLE"
                        },
                        new
                        {
                            TeamId = 22,
                            DivisionId = 8,
                            TeamFullName = "Denver Broncos",
                            TeamName = "Broncos",
                            TeamShortName = "DEN"
                        },
                        new
                        {
                            TeamId = 23,
                            DivisionId = 7,
                            TeamFullName = "Houston Texans",
                            TeamName = "Texans",
                            TeamShortName = "HOU"
                        },
                        new
                        {
                            TeamId = 24,
                            DivisionId = 7,
                            TeamFullName = "Jacksonville Jaguars",
                            TeamName = "Jaguars",
                            TeamShortName = "JAX"
                        },
                        new
                        {
                            TeamId = 25,
                            DivisionId = 8,
                            TeamFullName = "Kansas City Chiefs",
                            TeamName = "Chiefs",
                            TeamShortName = "KC"
                        },
                        new
                        {
                            TeamId = 26,
                            DivisionId = 8,
                            TeamFullName = "Las Vegas Raiders",
                            TeamName = "Raiders",
                            TeamShortName = "LV"
                        },
                        new
                        {
                            TeamId = 27,
                            DivisionId = 8,
                            TeamFullName = "Los Angeles Chargers",
                            TeamName = "Chargers",
                            TeamShortName = "LAC"
                        },
                        new
                        {
                            TeamId = 28,
                            DivisionId = 6,
                            TeamFullName = "Miami Dolphins",
                            TeamName = "Dolphins",
                            TeamShortName = "MIA"
                        },
                        new
                        {
                            TeamId = 29,
                            DivisionId = 6,
                            TeamFullName = "New England Patriots",
                            TeamName = "Patriots",
                            TeamShortName = "NE"
                        },
                        new
                        {
                            TeamId = 30,
                            DivisionId = 6,
                            TeamFullName = "New York Jets",
                            TeamName = "Jets",
                            TeamShortName = "NYJ"
                        },
                        new
                        {
                            TeamId = 31,
                            DivisionId = 5,
                            TeamFullName = "Pittsburgh Steelers",
                            TeamName = "Steelers",
                            TeamShortName = "PIT"
                        },
                        new
                        {
                            TeamId = 32,
                            DivisionId = 7,
                            TeamFullName = "Tennessee Titans",
                            TeamName = "Titans",
                            TeamShortName = "TEN"
                        });
                });

            modelBuilder.Entity("WebApp.Database.Tables.User.AppIdentityRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("AppIdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "390eddd4-11b2-4af3-b10a-e84ae12084fd",
                            Name = "USER",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "a7f02fd6-8d5d-40bd-8446-c6440d0929ee",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("WebApp.Database.Tables.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Database.Tables.Division", b =>
                {
                    b.HasOne("WebApp.Database.Tables.Conference", "Conference")
                        .WithMany("Divisions")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("WebApp.Database.Tables.Game", b =>
                {
                    b.HasOne("WebApp.Database.Tables.Team", "AwayTeam")
                        .WithMany("AwayGames")
                        .HasForeignKey("AwayTeamId")
                        .IsRequired();

                    b.HasOne("WebApp.Database.Tables.Team", "HomeTeam")
                        .WithMany("HomeGames")
                        .HasForeignKey("HomeTeamId")
                        .IsRequired();

                    b.HasOne("WebApp.Database.Tables.SeasonWeek", "SeasonWeek")
                        .WithMany("Games")
                        .HasForeignKey("SeasonWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("SeasonWeek");
                });

            modelBuilder.Entity("WebApp.Database.Tables.SeasonWeek", b =>
                {
                    b.HasOne("WebApp.Database.Tables.Season", "Season")
                        .WithMany("SeasonWeeks")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApp.Database.Tables.SeasonWeekType", "SeasonWeekType")
                        .WithMany("SeasonWeeks")
                        .HasForeignKey("SeasonWeekTypeName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("SeasonWeekType");
                });

            modelBuilder.Entity("WebApp.Database.Tables.Team", b =>
                {
                    b.HasOne("WebApp.Database.Tables.Division", "Division")
                        .WithMany("Teams")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("WebApp.Database.Tables.Conference", b =>
                {
                    b.Navigation("Divisions");
                });

            modelBuilder.Entity("WebApp.Database.Tables.Division", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("WebApp.Database.Tables.Season", b =>
                {
                    b.Navigation("SeasonWeeks");
                });

            modelBuilder.Entity("WebApp.Database.Tables.SeasonWeek", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("WebApp.Database.Tables.SeasonWeekType", b =>
                {
                    b.Navigation("SeasonWeeks");
                });

            modelBuilder.Entity("WebApp.Database.Tables.Team", b =>
                {
                    b.Navigation("AwayGames");

                    b.Navigation("HomeGames");
                });
#pragma warning restore 612, 618
        }
    }
}
