@using WebApp.Common.Models
@using WebApp.Client.Components.Common.FormDialog
@using WebApp.Client.Store.SeasonStore
@using WebApp.Client.Common.Extensions

@inherits FluxorComponent
@implements IFormDialogContent

@inject IDispatcher Dispatcher
@inject IActionSubscriber ActionSubscriber

<FormDialog @ref="FormDialog" Title="Add A New Season" Model="@Model" OnSubmit="DispatchSubmitAction">
    <MudTextField @bind-Value="Model.SeasonId" For="@(() => Model.SeasonId)" Label="Season Year" Class="mt-1" Disabled="FormDialog.IsFormDialogSubmitting" />
    <MudTextField @bind-Value="Model.Description" For="@(() => Model.Description)" Label="Description" Class="mt-1" Disabled="FormDialog.IsFormDialogSubmitting" />
</FormDialog>


@code 
{
    public Action OnValidSubmitCallbackSuccess { get; set; }

    public Func<ApiError, Task> OnValidSubmitCallbackErrorAsync { get; set; }

    private CreateSeasonRequest Model = new();

    private FormDialog FormDialog { get; set; }

    protected override void OnInitialized()
    {
        ActionSubscriber.SubscribeToAction<SeasonActions.CreateSeasonSuccess>(this, action =>
        {
            OnValidSubmitCallbackSuccess?.Invoke();
        });

        ActionSubscriber.SubscribeToAction<SeasonActions.CreateSeasonFailure>(this, async action =>
        {
            await OnValidSubmitCallbackErrorAsync?.Invoke(action.ApiError);
        });

        base.OnInitialized();
    }

    private void DispatchSubmitAction()
    {
        Dispatcher.DispatchFetch(new SeasonActions.CreateSeason
        {
            Request = Model,
            DispatchErrorToWindow = false,
            ForceDispatch = true
        });
    }

    protected override async ValueTask DisposeAsyncCore(bool disposing)
    {
        if (disposing)
        {
            ActionSubscriber.UnsubscribeFromAllActions(this);
        }

        await base.DisposeAsyncCore(disposing);
    }
}
