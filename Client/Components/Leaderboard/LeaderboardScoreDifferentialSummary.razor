@using WebApp.Client.Components.Common.WebAppComponentBase
@using WebApp.Client.Common.Extensions
@using WebApp.Client.Components.Common.LoadingWrapper
@using WebApp.Client.Components.GamePredictionForUser

@inherits WebAppComponentBase
@inject NavigationManager Navigation

<div class="wa_table__container_large">
    <div class="wa_table__header">
        <MudText Typo="@Typo.h6">Score Differential Leaders</MudText>
        <MudText Typo="@Typo.subtitle1">(Lower is Better)</MudText>
        <hr class="wa_hr__purpleGradient" style="margin: 15px 0px 15px 0px;" />
    </div>
    <SkeletonLoadingWrapper IsLoading=@DisplayLoading Width="100%" Height="30rem">
        <div class="wa_table__overflowContainer">
            <MudTable T="OrderedUserRanking" Items="GetLeaderboard()" Hover="true" Breakpoint="Breakpoint.None" Dense="false" Class="wa_table__mudOverrides">
                <RowTemplate>
                    <MudTd>
                        <MudText Typo="Typo.body2">@((context.Index + 1).ToOrdinalNumberString())</MudText>
                    </MudTd>
                    <MudTd>
                        <MudButton OnClick="@(e => OnUserClicked(@context.UserRanking.UserId))" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.NavigateNext">
                            <MudText Typo="Typo.body2">@($"{context.UserRanking.FirstName} {context.UserRanking.LastName}")</MudText>
                        </MudButton>
                    </MudTd>
                    <MudTd>
                        <MudText Typo="Typo.body2">@($"{context.UserRanking.ScoreDifferentialTotal} Points")</MudText>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </div>
    </SkeletonLoadingWrapper>
</div>

@code {

    [Parameter]
    [EditorRequired]
    public IReadOnlyList<LeaderboardItem> LeaderboardItems { get; set; }

    [Parameter]
    [EditorRequired]
    public bool DisplayLoading { get; set; }

    private IReadOnlyList<OrderedUserRanking> GetLeaderboard()
    {
        if (LeaderboardItems.Count == 0)
        {
            return [];
        }

        var users = from item in LeaderboardItems
                    from p in item.UserPredictions
                    group p by p.Key into userGroup
                    select new UserRanking
                    {
                        UserId = userGroup.Key,
                        FirstName = userGroup.Max(x => x.Value.FirstName),
                        LastName = userGroup.Max(x => x.Value.LastName),
                        ScoreDifferentialTotal = userGroup.Sum(x => x.Value.ScoreDifferential)
                    };

        return users
            .OrderBy(x => x.ScoreDifferentialTotal)
            .ThenBy(x => x.UserId)
            .Select((UserRanking, index) => new OrderedUserRanking
            {
                UserRanking = UserRanking,
                Index = index
            })
            .ToList();
    }

    private void OnUserClicked(string userId)
    {
        Navigation.NavigateTo($"/UserPredictions/{userId}");
    }

    private record UserRanking
    {
        public string UserId { get; init; }
        public string FirstName { get; init; }
        public string LastName { get; init; }
        public int ScoreDifferentialTotal { get; init; }
    }

    private record OrderedUserRanking
    {
        public int Index { get; init; }
        public UserRanking UserRanking { get; init; }
    }
}
