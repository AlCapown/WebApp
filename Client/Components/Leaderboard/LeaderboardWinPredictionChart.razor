@inherits ComponentBase

@using WebApp.Client.Components.Common.WebAppComponentBase
@using WebApp.Client.Components.Common.LoadingWrapper

<div class="wa_table__container_large">
    <div class="wa_table__header">
        <MudText Typo="@Typo.h6">Win Prediction Leaders Per Week</MudText>
        <MudText Typo="@Typo.subtitle1">(Higher is Better)</MudText>
        <hr class="wa_hr__purpleGradient" style="margin: 15px 0px 15px 0px;" />
    </div>
    <SkeletonLoadingWrapper IsLoading=@DisplayLoading Width="100%" Height="30rem">
        <div class="wa_table__overflowContainer">
            <MudChart ChartType="ChartType.Line" ChartSeries="GetChartSeries()" XAxisLabels="GetXAxisLabels()" ChartOptions="@Options" />
        </div>
    </SkeletonLoadingWrapper>
</div>

@code {

    [Parameter]
    [EditorRequired]
    public IReadOnlyList<LeaderboardItem> LeaderboardItems { get; set; }

    [Parameter]
    [EditorRequired]
    public bool DisplayLoading { get; set; }

    private ChartOptions Options = new ChartOptions
    {
        YAxisTicks = 1
    };

    private List<ChartSeries> GetChartSeries()
    {
        if (LeaderboardItems.Count == 0)
        {
            return [];
        }

        var users = from item in LeaderboardItems.OrderBy(x => x.Week)
                    from p in item.UserPredictions
                    group p by p.Key into userGroup
                    select new
                    {
                        UserId = userGroup.Key,
                        FirstName = userGroup.Max(x => x.Value.FirstName),
                        LastName = userGroup.Max(x => x.Value.LastName),
                        RollingTotal = userGroup.Aggregate(new List<double>(), (accumilator, index) =>
                        {
                            accumilator.Add(accumilator.Count != 0
                                ? accumilator.Last() + (index.Value.PredictedWinningTeam ? 1 : 0) 
                                : index.Value.PredictedWinningTeam ? 1 : 0);

                            return accumilator;
                        }) 
                    };

        return users.Select(x => new ChartSeries
        {
            Name = x.FirstName + " " + x.LastName,
            Data = x.RollingTotal.ToArray()
        }).ToList();
    }

    private string[] GetXAxisLabels()
    {
        return LeaderboardItems.Count > 0
            ? LeaderboardItems.OrderBy(x => x.Week).Select(x => x.Week.ToString()).ToArray()
            : [];
    }
}
