@using WebApp.Client.Common.Extensions
@using WebApp.Client.Components.Common.LoadingWrapper
@using WebApp.Client.Components.Common.WebAppComponentBase
@using WebApp.Client.Store.GameStore
@using WebApp.Client.Store.GamePredictionStore
@using WebApp.Client.Store.PageStore
@using WebApp.Common.Enums
@using WebApp.Common.Models

@inherits WebAppComponentBase
@inject NavigationManager Navigation
@inject IState<GameState> GameState
@inject IState<GamePredictionState> GamePredictionState
@inject IState<PageState> PageState

<MudTabs Rounded="true" TabHeaderClass="mb-6" Outlined="true" @bind-ActivePanelIndex=@InternalTabIndex>
    <MudTabPanel Text="Summary" Icon="@Icons.Material.Outlined.Summarize">
        <MudGrid>
            <MudItem xs="12" lg="6">
                <LeaderboardScoreDifferentialSummary LeaderboardItems=@LeaderboardItems DisplayLoading=@IsLoading() />
            </MudItem>
            <MudItem xs="12" lg="6">
                <LeaderboardWinPredictionSummary LeaderboardItems=@LeaderboardItems DisplayLoading=@IsLoading() />
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    <MudTabPanel Text="Details" Icon="@Icons.Material.Outlined.Details">
        <MudGrid>
            <MudItem xs="12" lg="6">
                <LeaderboardScoreDifferentialGrid LeaderboardItems=@LeaderboardItems DisplayLoading=@IsLoading() />
            </MudItem>
            <MudItem xs="12" lg="6">
                <LeaderboardWinPredictionGrid LeaderboardItems=@LeaderboardItems DisplayLoading=@IsLoading() />
            </MudItem>
            <MudItem xs="12" lg="6">
                <LeaderboardScoreDifferentialChart LeaderboardItems=@LeaderboardItems DisplayLoading=@IsLoading() />
            </MudItem>
            <MudItem xs="12" lg="6">
                <LeaderboardWinPredictionChart LeaderboardItems=@LeaderboardItems DisplayLoading=@IsLoading() />
            </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>


@code {

    [Parameter]
    public int SeasonId { get; set; }

    [Parameter]
    public int TeamId { get; set; }

    [SupplyParameterFromQuery]
    [Parameter]
    public int? TabIndex { get; set; }

    private IReadOnlyList<LeaderboardItem> LeaderboardItems { get; set; } = [];

    private int _internalTabIndex;

    private int InternalTabIndex 
    {
        get => _internalTabIndex;

        set
        {
            _internalTabIndex = value;
            Navigation.NavigateTo(Navigation.GetUriWithQueryParameter(nameof(TabIndex), value));
            UpdatePageLocalState(ReadPageLocalState<LeaderboardPageLocalState>(PageState.Value) with 
            {
                TabIndex = value
            });
        } 
    } 

    protected override void OnInitialized()
    {
        MaybeDispatchAndTrack(new GamePredictionActions.GamePredictionSearch
        {
            SeasonId = SeasonId,
            TeamId = TeamId
        });

        MaybeDispatchAndTrack(new GameActions.SearchGamesForSeason
        {
            SeasonId = SeasonId,
            TeamId = TeamId
        });

        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (TabIndex.HasValue)
            {
                InternalTabIndex = TabIndex.Value;
            }
            else
            {
                InternalTabIndex = ReadPageLocalState<LeaderboardPageLocalState>(PageState.Value).TabIndex;
            }
        }

        ComputeLeaderboardItems();

        base.OnAfterRender(firstRender);
    }

    private void ComputeLeaderboardItems()
    {
        var games = GameState.Value.Games.Values
            .Where(x => x.SeasonId == SeasonId)
            .Where(x => x.HomeTeamId == TeamId || x.AwayTeamId == TeamId)
            .Where(x => x.SeasonWeekTypeName == WeekType.RegularSeason)
            .OrderBy(x => x.Week)
            .ToArray();

        var gamePredictions = GamePredictionState.Value.GamePredictions.Values
            .Where(x => x.SeasonId == SeasonId)
            .Where(x => x.HomeTeamId == TeamId || x.AwayTeamId == TeamId)
            .ToArray();

        var users = gamePredictions
            .DistinctBy(x => x.UserId)
            .ToArray();

        var predictionLookup = gamePredictions
            .ToDictionary(key => (key.UserId, key.GameId), value => value);

        var result = new List<LeaderboardItem>(games.Length);

        foreach (var game in games)
        {
            var userPredictions = new Dictionary<string, UserPrediction>(users.Length);

            foreach (var user in users)
            {
                predictionLookup.TryGetValue((user.UserId, game.GameId), out var gamePrediction);

                int scoreDifferential = 
                    Math.Abs(game.HomeTeamScore - (gamePrediction?.PredictedHomeTeamScore ?? 0)) +
                    Math.Abs(game.AwayTeamScore - (gamePrediction?.PredictedAwayTeamScore ?? 0));

                bool predictedWinningTeam =
                    game.HomeTeamScore != game.AwayTeamScore &&
                    gamePrediction != null &&
                    gamePrediction.PredictedHomeTeamScore != gamePrediction.PredictedAwayTeamScore &&
                    (
                        (game.HomeTeamScore > game.AwayTeamScore && gamePrediction.PredictedHomeTeamScore > gamePrediction.PredictedAwayTeamScore) ||
                        (game.HomeTeamScore < game.AwayTeamScore && gamePrediction.PredictedHomeTeamScore < gamePrediction.PredictedAwayTeamScore)
                    );
                
                userPredictions[user.UserId] = new UserPrediction
                {
                    UserId = user.UserId,
                    FirstName = user.FirstName,
                    LastName = user.LastName,
                    ScoreDifferential = scoreDifferential,
                    PredictedWinningTeam = predictedWinningTeam
                };
            }

            result.Add(new LeaderboardItem
            {
                Week = game.Week,
                UserPredictions = userPredictions
            });
        }

        LeaderboardItems = result;
    }

    private sealed record LeaderboardPageLocalState
    {
        public int TabIndex { get; init; }
    }
}
