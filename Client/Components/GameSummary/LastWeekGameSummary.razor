@using WebApp.Client.Common.Extensions
@using WebApp.Client.Components.Common.WebAppComponentBase
@using WebApp.Client.Store.GameStore
@using WebApp.Common.Enums
@using WebApp.Common.Models

@inherits WebAppComponentBase

@inject IState<GameState> GameState

@if (LastCompletedGameId is int gameId)
{
    <GameSummary GameId=gameId />
}

@code 
{
    #nullable enable

    [Parameter, EditorRequired]
    public int SeasonId { get; set; }

    [Parameter, EditorRequired]
    public int TeamId { get; set; }

    protected override void OnInitialized()
    {
        MaybeDispatchAndTrack(new GameActions.SearchGamesForSeason
        {
            SeasonId = SeasonId,
            TeamId = TeamId
        });

        base.OnInitialized();
    }

    private int? LastCompletedGameId => GameState.Value.Games.Values
        .Where(x => x.SeasonId == SeasonId)
        .Where(x => x.HomeTeamId == TeamId || x.AwayTeamId == TeamId)
        .Where(x => x.SeasonWeekTypeName == WeekType.RegularSeason)
        .Where(x => x.IsComplete)
        .Where(x => x.HasSummary)
        .MaxBy(x => x.GameStartsOn)
        ?.GameId;

}
